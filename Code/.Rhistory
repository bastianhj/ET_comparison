# compile data for each case
# Eye-tracking comparison experiment
# Universidad de Chile - National University of Singapore
# Bastian Henríquez-Jara
rm(list = ls())
library(dplyr)
library(plyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## change this if needed
cases=c('monitor','laptop','tablet','mobile')
N_participants=40
exp='EXPERIMENT2'
filenames <- list.files(paste0('../Data/',exp,'/'),pattern="*.csv", full.names=TRUE)
### function to detect if file is empty
is_csv_empty <- function(file_path) {
# Check if the file exists
if (!file.exists(file_path)) {
stop("File does not exist.")
}
# Check if the file size is zero
file_size <- file.info(file_path)$size
if (file_size == 0) {
return(TRUE) # File is empty
}
# Open a connection to the file and check its content
con <- file(file_path, "r")
first_line <- readLines(con, n = 1, warn = FALSE)
close(con)
# Check if the first line exists (non-empty header)
if (length(first_line) == 0 || all(trimws(first_line) == "")) {
return(TRUE) # File is effectively empty
}
# Attempt to read a few rows to check for actual data
tryCatch({
data <- read.csv(file_path, nrows = 5)
if (nrow(data) == 0) {
return(TRUE) # No data rows found
}
return(FALSE) # File has data
}, error = function(e) {
warning("File might have structural issues: ", e$message)
return(TRUE) # Assume empty or problematic file
})
}
########## compile data ###############
errors_id=c()
for (case in cases){
devices<-sub(".*_", "",filenames)
ids<-sub(".*/", "",filenames)
ids<-sub("_.*", "",ids)[devices==paste0(case,'.csv')]
temp<-sub(paste0("_",case,'.*'), "", filenames)
temp=sub(".*_", "", temp)
block=temp[devices==paste0(case,'.csv')]
compiled=c()
#compile data for all participants
for(id in 1:N_participants){
# print(length(block[ids==paste0('pct',id)]))
name=block[ids==paste0('pct',id)]
if (length(name)>=1){
if(length(name)==1){
name=name[1]
}
path=paste0('../Data_NUS/',exp,'/pct',id,'_',name,'_',case,'.csv')
if(!is_csv_empty(path)){
data=read.csv(path)
data=data[!is.na(data$Trial),]
data$pid=id
compiled=rbind.fill(compiled,data)
}else{
errors_id=c(errors_id,id)
}
}else{
errors_id=c(errors_id,id)
}
}
if(exp=='EXPERIMENT1'){
compiled_choices<-compiled[,c('pid',"Trial","TrialDuration","Block","Device","RH_cost" ,"RH_travel_time","RH_Comfort","metro_cost","metro_travel_time","metro_Comfort","Bus_cost","Bus_travel_time","Bus_Comfort","Choice")]
}else{
compiled_choices<-compiled[,c('pid',"Trial","TrialDuration","Block","Device","cost1","qual1","cost2","qual2","Choice")]
}
write.csv(compiled_choices,paste0('../Compiled_data/',exp,'_',case,'_choices.csv'))
}
filenames
names()
name
block[ids==paste0('pct',id)]
# compile data for each case
# Eye-tracking comparison experiment
# Universidad de Chile - National University of Singapore
# Bastian Henríquez-Jara
rm(list = ls())
library(dplyr)
library(plyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## change this if needed
cases=c('monitor','laptop','tablet','mobile')
N_participants=40
exp='EXPERIMENT2'
filenames <- list.files(paste0('../Data/',exp,'/'),pattern="*.csv", full.names=TRUE)
### function to detect if file is empty
is_csv_empty <- function(file_path) {
# Check if the file exists
if (!file.exists(file_path)) {
stop("File does not exist.")
}
# Check if the file size is zero
file_size <- file.info(file_path)$size
if (file_size == 0) {
return(TRUE) # File is empty
}
# Open a connection to the file and check its content
con <- file(file_path, "r")
first_line <- readLines(con, n = 1, warn = FALSE)
close(con)
# Check if the first line exists (non-empty header)
if (length(first_line) == 0 || all(trimws(first_line) == "")) {
return(TRUE) # File is effectively empty
}
# Attempt to read a few rows to check for actual data
tryCatch({
data <- read.csv(file_path, nrows = 5)
if (nrow(data) == 0) {
return(TRUE) # No data rows found
}
return(FALSE) # File has data
}, error = function(e) {
warning("File might have structural issues: ", e$message)
return(TRUE) # Assume empty or problematic file
})
}
########## compile data ###############
errors_id=c()
for (case in cases){
devices<-sub(".*_", "",filenames)
ids<-sub(".*/", "",filenames)
ids<-sub("_.*", "",ids)[devices==paste0(case,'.csv')]
temp<-sub(paste0("_",case,'.*'), "", filenames)
temp=sub(".*_", "", temp)
block=temp[devices==paste0(case,'.csv')]
compiled=c()
#compile data for all participants
for(id in 1:N_participants){
# print(length(block[ids==paste0('pct',id)]))
name=block[ids==paste0('pct',id)]
if (length(name)>=1){
if(length(name)==1){
name=name[1]
}
path=paste0('../Data/',exp,'/pct',id,'_',name,'_',case,'.csv')
if(!is_csv_empty(path)){
data=read.csv(path)
data=data[!is.na(data$Trial),]
data$pid=id
compiled=rbind.fill(compiled,data)
}else{
errors_id=c(errors_id,id)
}
}else{
errors_id=c(errors_id,id)
}
}
if(exp=='EXPERIMENT1'){
compiled_choices<-compiled[,c('pid',"Trial","TrialDuration","Block","Device","RH_cost" ,"RH_travel_time","RH_Comfort","metro_cost","metro_travel_time","metro_Comfort","Bus_cost","Bus_travel_time","Bus_Comfort","Choice")]
}else{
compiled_choices<-compiled[,c('pid',"Trial","TrialDuration","Block","Device","cost1","qual1","cost2","qual2","Choice")]
}
write.csv(compiled_choices,paste0('../Compiled_data/',exp,'_',case,'_choices.csv'))
}
id
name
length(name)
# compile data for each case
# Eye-tracking comparison experiment
# Universidad de Chile - National University of Singapore
# Bastian Henríquez-Jara
rm(list = ls())
library(dplyr)
library(plyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## change this if needed
cases=c('monitor','laptop','tablet','mobile')
N_participants=40
exp='EXPERIMENT2'
filenames <- list.files(paste0('../Data/',exp,'/'),pattern="*.csv", full.names=TRUE)
### function to detect if file is empty
is_csv_empty <- function(file_path) {
# Check if the file exists
if (!file.exists(file_path)) {
stop("File does not exist.")
}
# Check if the file size is zero
file_size <- file.info(file_path)$size
if (file_size == 0) {
return(TRUE) # File is empty
}
# Open a connection to the file and check its content
con <- file(file_path, "r")
first_line <- readLines(con, n = 1, warn = FALSE)
close(con)
# Check if the first line exists (non-empty header)
if (length(first_line) == 0 || all(trimws(first_line) == "")) {
return(TRUE) # File is effectively empty
}
# Attempt to read a few rows to check for actual data
tryCatch({
data <- read.csv(file_path, nrows = 5)
if (nrow(data) == 0) {
return(TRUE) # No data rows found
}
return(FALSE) # File has data
}, error = function(e) {
warning("File might have structural issues: ", e$message)
return(TRUE) # Assume empty or problematic file
})
}
########## compile data ###############
errors_id=c()
for (case in cases){
devices<-sub(".*_", "",filenames)
ids<-sub(".*/", "",filenames)
ids<-sub("_.*", "",ids)[devices==paste0(case,'.csv')]
temp<-sub(paste0("_",case,'.*'), "", filenames)
temp=sub(".*_", "", temp)
block=temp[devices==paste0(case,'.csv')]
compiled=c()
#compile data for all participants
for(id in 1:N_participants){
# print(length(block[ids==paste0('pct',id)]))
name=block[ids==paste0('pct',id)]
if (length(name)>=1){
if(length(name)>1){
name=name[1]
}
path=paste0('../Data/',exp,'/pct',id,'_',name,'_',case,'.csv')
if(!is_csv_empty(path)){
data=read.csv(path)
data=data[!is.na(data$Trial),]
data$pid=id
compiled=rbind.fill(compiled,data)
}else{
errors_id=c(errors_id,id)
}
}else{
errors_id=c(errors_id,id)
}
}
if(exp=='EXPERIMENT1'){
compiled_choices<-compiled[,c('pid',"Trial","TrialDuration","Block","Device","RH_cost" ,"RH_travel_time","RH_Comfort","metro_cost","metro_travel_time","metro_Comfort","Bus_cost","Bus_travel_time","Bus_Comfort","Choice")]
}else{
compiled_choices<-compiled[,c('pid',"Trial","TrialDuration","Block","Device","cost1","qual1","cost2","qual2","Choice")]
}
write.csv(compiled_choices,paste0('../Compiled_data/',exp,'_',case,'_choices.csv'))
}
errors_id
# compile data for each case
# Eye-tracking comparison experiment
# Universidad de Chile - National University of Singapore
# Bastian Henríquez-Jara
rm(list = ls())
library(dplyr)
library(plyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## change this if needed
cases=c('monitor','laptop','tablet','mobile')
N_participants=40
exp='EXPERIMENT1'
filenames <- list.files(paste0('../Data/',exp,'/'),pattern="*.csv", full.names=TRUE)
### function to detect if file is empty
is_csv_empty <- function(file_path) {
# Check if the file exists
if (!file.exists(file_path)) {
stop("File does not exist.")
}
# Check if the file size is zero
file_size <- file.info(file_path)$size
if (file_size == 0) {
return(TRUE) # File is empty
}
# Open a connection to the file and check its content
con <- file(file_path, "r")
first_line <- readLines(con, n = 1, warn = FALSE)
close(con)
# Check if the first line exists (non-empty header)
if (length(first_line) == 0 || all(trimws(first_line) == "")) {
return(TRUE) # File is effectively empty
}
# Attempt to read a few rows to check for actual data
tryCatch({
data <- read.csv(file_path, nrows = 5)
if (nrow(data) == 0) {
return(TRUE) # No data rows found
}
return(FALSE) # File has data
}, error = function(e) {
warning("File might have structural issues: ", e$message)
return(TRUE) # Assume empty or problematic file
})
}
########## compile data ###############
errors_id=c()
for (case in cases){
devices<-sub(".*_", "",filenames)
ids<-sub(".*/", "",filenames)
ids<-sub("_.*", "",ids)[devices==paste0(case,'.csv')]
temp<-sub(paste0("_",case,'.*'), "", filenames)
temp=sub(".*_", "", temp)
block=temp[devices==paste0(case,'.csv')]
compiled=c()
#compile data for all participants
for(id in 1:N_participants){
# print(length(block[ids==paste0('pct',id)]))
name=block[ids==paste0('pct',id)]
if (length(name)>=1){
if(length(name)>1){
name=name[1]
}
path=paste0('../Data/',exp,'/pct',id,'_',name,'_',case,'.csv')
if(!is_csv_empty(path)){
data=read.csv(path)
data=data[!is.na(data$Trial),]
data$pid=id
compiled=rbind.fill(compiled,data)
}else{
errors_id=c(errors_id,id)
}
}else{
errors_id=c(errors_id,id)
}
}
if(exp=='EXPERIMENT1'){
compiled_choices<-compiled[,c('pid',"Trial","TrialDuration","Block","Device","RH_cost" ,"RH_travel_time","RH_Comfort","metro_cost","metro_travel_time","metro_Comfort","Bus_cost","Bus_travel_time","Bus_Comfort","Choice")]
}else{
compiled_choices<-compiled[,c('pid',"Trial","TrialDuration","Block","Device","cost1","qual1","cost2","qual2","Choice")]
}
write.csv(compiled_choices,paste0('../Compiled_data/',exp,'_',case,'_choices.csv'))
}
errors_id
# pizzas baseline model
# Eye-tracking comparison experiment
# Universidad de Chile - National University of Singapore
# Bastian Henríquez-Jara
library(apollo)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
cases=c('monitor','laptop','tablet','mobile')
exp='EXPERIMENT2'
for (case in cases){
path=paste0('../Compiled_data/',exp,'_',case,'_','choices','.csv')
data=read.csv(path)
data$Choice_id=1*(data$Choice=="Option1_label")+2*(data$Choice=="Option2_label")
#robse=c()
apollo_initialise()
#for(i in 101:150){
### Initialise code
### Set core controls
apollo_control = list(
modelName       = paste0(exp,'_',case,'_baseline_MNL'),
modelDescr      = "MNL for pizzass choices - ET comparison",
indivID         = "pid",
outputDirectory = "output"
)
database = data
apollo_beta = c(b_opt1=0,
b_opt2=0,
b_qual=0,
b_cost=0)
apollo_fixed=c('b_opt2')
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
V = list()
V[['opt1']]=b_opt1+b_cost*cost1+b_qual*qual1
V[['opt2']]=b_opt2+b_cost*cost2+b_qual*qual2
mnl_settings = list(
alternatives  = c(opt1=1,opt2=2),
avail=1,
choiceVar = Choice_id,
utilities = V
)
P[["model"]] = apollo_mnl(mnl_settings, functionality)
#P = apollo_combineModels(P, apollo_inputs, functionality)
### Take product across observation for same individual
#P = apollo_avgIntraDraws(P, apollo_inputs, functionality)
P = apollo_panelProd(P, apollo_inputs, functionality)
### Average across inter-individual draws
# P = apollo_avgInterDraws(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
# ################################################################# #
#### MODEL ESTIMATION                                            ####
# ################################################################# #
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model)
# ----------------------------------------------------------------- #
#---- FORMATTED OUTPUT (TO FILE, using model name)               ----
# ----------------------------------------------------------------- #
# betas<-rbind(betas,model$estimate)
# robse<-rbind(robse,model$robse)
# }
apollo_saveOutput(model)
}
### now compare models
combineResults_settings=list(estimateDigits=3,
modelNames=paste0(exp,'_',cases,'_baseline_MNL'))
apollo_combineResults(combineResults_settings)
?apollo_combineResults
