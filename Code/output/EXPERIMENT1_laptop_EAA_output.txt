Model run by Bastian_Henriquez using Apollo 0.3.1 on R 4.3.3 for Windows.
Please acknowledge the use of Apollo by citing Hess & Palma (2019)
  DOI 10.1016/j.jocm.2019.100170
  www.ApolloChoiceModelling.com

Model name                                  : EXPERIMENT1_laptop_EAA
Model description                           : MNL for transport choices - ET comparison
Model run at                                : 2024-12-21 13:32:53.638843
Estimation method                           : bgw
Model diagnosis                             : Relative function convergence
Optimisation diagnosis                      : Maximum found
     hessian properties                     : Negative definite
     maximum eigenvalue                     : -1.214565
     reciprocal of condition number         : 5.32276e-05
Number of individuals                       : 40
Number of rows in database                  : 480
Number of modelled outcomes                 : 480

Number of cores used                        :  1 
Model without mixing

LL(start)                                   : -527.33
LL (whole model) at equal shares, LL(0)     : -527.33
LL (whole model) at observed shares, LL(C)  : -391.64
LL(final, whole model)                      : -291.88
Rho-squared vs equal shares                  :  0.4465 
Adj.Rho-squared vs equal shares              :  0.4313 
Rho-squared vs observed shares               :  0.2547 
Adj.Rho-squared vs observed shares           :  0.2752 
AIC                                         :  599.76 
BIC                                         :  633.15 

LL(0,Class_1)                    : -527.33
LL(final,Class_1)                : -391.95
LL(0,Class_2)                    : -527.33
LL(final,Class_2)                : -1479.33
LL(0,Class_3)                    : -527.33
LL(final,Class_3)                : -617.74
LL(0,Class_4)                    : -527.33
LL(final,Class_4)                : -432.99
LL(0,Class_5)                    : -527.33
LL(final,Class_5)                : -435.21
LL(0,Class_6)                    : -527.33
LL(final,Class_6)                : -667.8
LL(0,Class_7)                    : -527.33
LL(final,Class_7)                : -895.72
LL(0,Class_8)                    : -527.33
LL(final,Class_8)                : -501.6

Estimated parameters                        : 8
Time taken (hh:mm:ss)                       :  00:00:13.63 
     pre-estimation                         :  00:00:10.41 
     estimation                             :  00:00:1.32 
     post-estimation                        :  00:00:1.9 
Iterations                                  :  27  

Unconstrained optimisation.

Estimates:
                 Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
b_bus              0.0000          NA          NA          NA            NA
b_metro            0.9507     0.16803      5.6579     0.16296        5.8341
b_RH              -2.2124     0.57129     -3.8727     0.79910       -2.7687
b_time            -0.1373     0.01887     -7.2764     0.03082       -4.4536
b_cost            -0.2824     0.04120     -6.8541     0.06638       -4.2547
b_comfort          0.8659     0.12294      7.0435     0.15647        5.5340
b_time_att         1.9278     0.84544      2.2802     1.17057        1.6469
b_cost_att         1.9173     0.59195      3.2389     0.70271        2.7284
b_comfort_att     -0.4222     0.44838     -0.9417     0.55525       -0.7605


Summary of class allocation for model component :
         Mean prob.
Class_1    0.301387
Class_2    0.044305
Class_3    0.043842
Class_4    0.006445
Class_5    0.459731
Class_6    0.067582
Class_7    0.066876
Class_8    0.009831


Overview of choices for MNL model component Class_1:
                                    bus  metro     RH
Times available                  480.00 480.00 480.00
Times chosen                      58.00 335.00  87.00
Percentage chosen overall         12.08  69.79  18.12
Percentage chosen when available  12.08  69.79  18.12



Overview of choices for MNL model component Class_2:
                                    bus  metro     RH
Times available                  480.00 480.00 480.00
Times chosen                      58.00 335.00  87.00
Percentage chosen overall         12.08  69.79  18.12
Percentage chosen when available  12.08  69.79  18.12



Overview of choices for MNL model component Class_3:
                                    bus  metro     RH
Times available                  480.00 480.00 480.00
Times chosen                      58.00 335.00  87.00
Percentage chosen overall         12.08  69.79  18.12
Percentage chosen when available  12.08  69.79  18.12



Overview of choices for MNL model component Class_4:
                                    bus  metro     RH
Times available                  480.00 480.00 480.00
Times chosen                      58.00 335.00  87.00
Percentage chosen overall         12.08  69.79  18.12
Percentage chosen when available  12.08  69.79  18.12



Overview of choices for MNL model component Class_5:
                                    bus  metro     RH
Times available                  480.00 480.00 480.00
Times chosen                      58.00 335.00  87.00
Percentage chosen overall         12.08  69.79  18.12
Percentage chosen when available  12.08  69.79  18.12



Overview of choices for MNL model component Class_6:
                                    bus  metro     RH
Times available                  480.00 480.00 480.00
Times chosen                      58.00 335.00  87.00
Percentage chosen overall         12.08  69.79  18.12
Percentage chosen when available  12.08  69.79  18.12



Overview of choices for MNL model component Class_7:
                                    bus  metro     RH
Times available                  480.00 480.00 480.00
Times chosen                      58.00 335.00  87.00
Percentage chosen overall         12.08  69.79  18.12
Percentage chosen when available  12.08  69.79  18.12



Overview of choices for MNL model component Class_8:
                                    bus  metro     RH
Times available                  480.00 480.00 480.00
Times chosen                      58.00 335.00  87.00
Percentage chosen overall         12.08  69.79  18.12
Percentage chosen when available  12.08  69.79  18.12



Classical covariance matrix:
                    b_metro          b_RH        b_time        b_cost     b_comfort    b_time_att    b_cost_att
b_metro            0.028235      0.033464    2.5159e-04    5.9869e-04     -0.002261     -0.020523     -0.005707
b_RH               0.033464      0.326378      0.007647      0.002792     -0.035244      0.039860      0.023994
b_time           2.5159e-04      0.007647    3.5593e-04    4.7996e-04     -0.001282      0.006293      0.002659
b_cost           5.9869e-04      0.002792    4.7996e-04      0.001698     -0.002817      0.013468      0.008211
b_comfort         -0.002261     -0.035244     -0.001282     -0.002817      0.015113     -0.014096     -0.008671
b_time_att        -0.020523      0.039860      0.006293      0.013468     -0.014096      0.714761      0.171419
b_cost_att        -0.005707      0.023994      0.002659      0.008211     -0.008671      0.171419      0.350409
b_comfort_att     -0.002577     -0.008999     -0.001292     -0.005275      0.001263     -0.141148     -0.042445
              b_comfort_att
b_metro           -0.002577
b_RH              -0.008999
b_time            -0.001292
b_cost            -0.005275
b_comfort          0.001263
b_time_att        -0.141148
b_cost_att        -0.042445
b_comfort_att      0.201042

Robust covariance matrix:
                    b_metro          b_RH        b_time        b_cost     b_comfort    b_time_att    b_cost_att
b_metro            0.026555       0.05910    8.3770e-04    3.8123e-04     -0.004685      -0.04076     -0.023671
b_RH               0.059102       0.63856      0.021376      0.025330     -0.070173       0.23161      0.084383
b_time           8.3770e-04       0.02138    9.5011e-04      0.001542     -0.003191       0.01896      0.007815
b_cost           3.8123e-04       0.02533      0.001542      0.004406     -0.008494       0.04712      0.024273
b_comfort         -0.004685      -0.07017     -0.003191     -0.008494      0.024483      -0.06717     -0.033760
b_time_att        -0.040759       0.23161      0.018960      0.047121     -0.067170       1.37023      0.494713
b_cost_att        -0.023671       0.08438      0.007815      0.024273     -0.033760       0.49471      0.493797
b_comfort_att      0.016884      -0.01500     -0.003990     -0.016340      0.016399      -0.44988     -0.115464
              b_comfort_att
b_metro            0.016884
b_RH              -0.014999
b_time            -0.003990
b_cost            -0.016340
b_comfort          0.016399
b_time_att        -0.449882
b_cost_att        -0.115464
b_comfort_att      0.308298

Classical correlation matrix:
                    b_metro          b_RH        b_time        b_cost     b_comfort    b_time_att    b_cost_att
b_metro             1.00000       0.34860       0.07936       0.08647      -0.10943      -0.14446      -0.05738
b_RH                0.34860       1.00000       0.70954       0.11859      -0.50182       0.08253       0.07095
b_time              0.07936       0.70954       1.00000       0.61743      -0.55271       0.39456       0.23809
b_cost              0.08647       0.11859       0.61743       1.00000      -0.55612       0.38662       0.33663
b_comfort          -0.10943      -0.50182      -0.55271      -0.55612       1.00000      -0.13562      -0.11915
b_time_att         -0.14446       0.08253       0.39456       0.38662      -0.13562       1.00000       0.34252
b_cost_att         -0.05738       0.07095       0.23809       0.33663      -0.11915       0.34252       1.00000
b_comfort_att      -0.03421      -0.03513      -0.15273      -0.28553       0.02291      -0.37235      -0.15992
              b_comfort_att
b_metro            -0.03421
b_RH               -0.03513
b_time             -0.15273
b_cost             -0.28553
b_comfort           0.02291
b_time_att         -0.37235
b_cost_att         -0.15992
b_comfort_att       1.00000

Robust correlation matrix:
                    b_metro          b_RH        b_time        b_cost     b_comfort    b_time_att    b_cost_att
b_metro             1.00000       0.45387        0.1668       0.03524       -0.1837       -0.2137       -0.2067
b_RH                0.45387       1.00000        0.8678       0.47754       -0.5612        0.2476        0.1503
b_time              0.16678       0.86785        1.0000       0.75345       -0.6616        0.5255        0.3608
b_cost              0.03524       0.47754        0.7535       1.00000       -0.8178        0.6064        0.5204
b_comfort          -0.18374      -0.56123       -0.6616      -0.81783        1.0000       -0.3667       -0.3070
b_time_att         -0.21367       0.24761        0.5255       0.60645       -0.3667        1.0000        0.6014
b_cost_att         -0.20671       0.15027        0.3608       0.52039       -0.3070        0.6014        1.0000
b_comfort_att       0.18660      -0.03381       -0.2331      -0.44333        0.1888       -0.6922       -0.2959
              b_comfort_att
b_metro             0.18660
b_RH               -0.03381
b_time             -0.23314
b_cost             -0.44333
b_comfort           0.18875
b_time_att         -0.69218
b_cost_att         -0.29593
b_comfort_att       1.00000

 20 worst outliers in terms of lowest average per choice prediction:
 ID Avg prob per choice
 32           0.2452714
  6           0.3048440
  9           0.3274407
 19           0.3344488
 28           0.3622002
 25           0.3645729
  2           0.3928290
 40           0.4577443
  1           0.4607248
 16           0.4719586
  3           0.4767593
  7           0.4803166
 14           0.4991387
 39           0.5056648
 29           0.5114357
 36           0.5138987
 15           0.5361008
 21           0.5547825
 35           0.5802721
  8           0.5918584

Changes in parameter estimates from starting values:
                  Initial    Estimate  Difference
b_bus               0.000      0.0000      0.0000
b_metro             0.000      0.9507      0.9507
b_RH                0.000     -2.2124     -2.2124
b_time              0.000     -0.1373     -0.1373
b_cost              0.000     -0.2824     -0.2824
b_comfort           0.000      0.8659      0.8659
b_time_att          0.000      1.9278      1.9278
b_cost_att          0.000      1.9173      1.9173
b_comfort_att       0.000     -0.4222     -0.4222

Settings and functions used in model definition:

apollo_control
--------------
                       Value                                      
modelName              "EXPERIMENT1_laptop_EAA"                   
modelDescr             "MNL for transport choices - ET comparison"
indivID                "pid"                                      
outputDirectory        "output/"                                  
debug                  "FALSE"                                    
nCores                 "1"                                        
workInLogs             "FALSE"                                    
seed                   "13"                                       
mixing                 "FALSE"                                    
HB                     "FALSE"                                    
noValidation           "FALSE"                                    
noDiagnostics          "FALSE"                                    
calculateLLC           "TRUE"                                     
panelData              "TRUE"                                     
analyticGrad           "TRUE"                                     
analyticGrad_manualSet "FALSE"                                    
overridePanel          "FALSE"                                    
preventOverridePanel   "FALSE"                                    
noModification         "FALSE"                                    

Hessian routines attempted
--------------------------
numerical second derivative of LL (using numDeriv)


apollo_lcPars
---------------
function(apollo_beta, apollo_inputs){
    lcpars = list()
    # lcpars[["b_brand1"]] = list(b_brand1)
    # lcpars[["b_brand2"]] = list(b_brand2)
    # lcpars[["b_brand3"]] = list(b_brand3)
    # lcpars[["b_material1"]] = list(b_material1)
    # lcpars[["b_material2"]] = list(b_material2)
    # lcpars[["b_system1"]] = list(b_system1)
    # lcpars[["b_design1"]] = list(b_design1)
    # lcpars[["b_design2"]] = list(b_design2)
    # lcpars[["b_design3"]] = list(b_design3)
    # lcpars[["b_pricecup"]] = list(b_pricecup)
    # lcpars[["b_price"]] = list(b_price)
    ### Utilities of class allocation model
    
    V_cost=b_cost_att#+b_va*va1
    V_time=b_time_att#+b_va*va2
    V_comfort=b_comfort_att#+b_va*va3
    
    V_attributes=cbind(V_cost,V_time,V_comfort)
    class_matrix=as.matrix(expand.grid(c(1,0), c(1,0), c(1,0)))
    
    pi_attribute=c(1/(1+exp(-V_attributes)))
    list_pi=list()
    for(i in 1:8){
      A=prod((pi_attribute^class_matrix[i,])*(1-pi_attribute)^(1-class_matrix[i,]))
      list_pi[[i]]=A#apply(A,1,prod)#apply(matrix_power(A,(class_matrix[i,])),1,prod)
    }
    
    
    lcpars[["pi_values"]] = list_pi
    
    return(lcpars)
  }
<bytecode: 0x000001680c4f27d8>


apollo_probabilities
----------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
    ### Attach inputs and detach after function exit
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))
    
    ### Create list of probabilities P
    P = list()
    
    mnl_settings = list(
      alternatives  = c(bus=1,metro=2,RH=3),
      avail=1,
      choiceVar = Choice_id
    )

    class_matrix=(expand.grid(c(1,0), c(1,0), c(1,0)))
    
    for(s in 1:8){
      
      ### Compute class-specific utilities
      V=list()
      V[['bus']]=b_bus+b_cost*Bus_cost*class_matrix[s,1]+b_time*Bus_travel_time*class_matrix[s,2]+b_comfort*Bus_Comfort*class_matrix[s,3]
      
      V[['metro']]=b_metro+b_cost*metro_cost*class_matrix[s,1]+b_time*metro_travel_time*class_matrix[s,2]+b_comfort*metro_Comfort*class_matrix[s,3]
      
      V[['RH']]=b_RH+b_cost*RH_cost*class_matrix[s,1]+b_time*RH_travel_time*class_matrix[s,2]+b_comfort*RH_Comfort*class_matrix[s,3]
      
      mnl_settings$utilities     = V
      mnl_settings$componentName = paste0("Class_",s)
      
      ### Compute within-class choice probabilities using MNL model
      P[[paste0("Class_",s)]] = apollo_mnl(mnl_settings, functionality)
      
      ### Take product across observation for same individual
      P[[paste0("Class_",s)]] = apollo_panelProd(P[[paste0("Class_",s)]], apollo_inputs ,functionality)
      
    }
    
    lc_settings  = list(inClassProb = P, classProb=pi_values)
    
    P[["model"]] = apollo_lc(lc_settings, apollo_inputs, functionality)
    
    #P = apollo_combineModels(P, apollo_inputs, functionality)
    ### Take product across observation for same individual
    #P = apollo_avgIntraDraws(P, apollo_inputs, functionality)
    #P = apollo_panelProd(P, apollo_inputs, functionality)
    ### Average across inter-individual draws
    # P = apollo_avgInterDraws(P, apollo_inputs, functionality)
    ### Prepare and return outputs of function
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    
    return(P)
  }
<bytecode: 0x00000168026f7a20>
